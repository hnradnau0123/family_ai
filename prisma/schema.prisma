// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  children      Child[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Child {
  id             String         @id @default(cuid())
  name           String
  birthDate      DateTime
  parentId       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  parent         User           @relation(fields: [parentId], references: [id], onDelete: Cascade)
  conversations  Conversation[]
  insights       Insight[]
  recommendations Recommendation[]
}

model Conversation {
  id              String   @id @default(cuid())
  childId         String
  title           String?
  audioUrl        String?
  transcription   String?
  duration        Int? // in seconds
  conversationDate DateTime @default(now())
  processed       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  child           Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  insights        Insight[]
}

model Insight {
  id                    String       @id @default(cuid())
  childId               String
  conversationId        String?
  type                  String       // InsightType as string
  category              String       // e.g., "curiosity", "cognitive_strength", "interest"
  title                 String
  description           String
  confidence            Float        // 0.0 to 1.0
  metadata              String?      // JSON as string
  createdAt             DateTime     @default(now())
  child                 Child        @relation(fields: [childId], references: [id], onDelete: Cascade)
  conversation          Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)
}

model Recommendation {
  id            String            @id @default(cuid())
  childId       String
  type          String            // RecommendationType as string
  title         String
  description   String
  category      String            // e.g., "book", "activity", "class"
  url           String?
  location      String?
  ageGroup      String?
  price         String?
  provider      String?
  tags          String            // JSON string array
  isActive      Boolean           @default(true)
  clickCount    Int               @default(0)
  createdAt     DateTime          @default(now())
  child         Child             @relation(fields: [childId], references: [id], onDelete: Cascade)
}

// Note: Using strings instead of enums for SQLite compatibility
// InsightType: CURIOSITY_PATTERN, COGNITIVE_STRENGTH, INTEREST_SIGNAL, LEARNING_STYLE, SOCIAL_PATTERN
// RecommendationType: BOOK, ACTIVITY, CLASS, EXPERIENCE, TOY, GAME, VIDEO